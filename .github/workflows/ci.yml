name: CI

on:
  # push:
  #   tags:
  #     - "[0-9]+.[0-9]+.[0-9]+.[0-9]+"
  # branches:
  #   - master
  pull_request:
  workflow_dispatch:
    inputs:
      tag:
        description: "The tag to create (optional)"
        required: false

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # # This attempts to create a tag automatically for default branch
  # # in later jobs, `input.tags` should be changed to `env.TAG_NAME` (check conditionals)
  # tag-release:
  #   if: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
  #   runs-on: ubuntu
  #   steps:
  #     - uses: actions/checkout@v3
  #
  #     - name: Bump version and push tag
  #       if: ${{ inputs.tag == '' }}
  #       id: tag_version
  #       uses: mathieudutour/github-tag-action@v6.0
  #       with:
  #         release_branches: master,main
  #         tag_prefix: ""
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #
  #     - name: Set Tag (manual)
  #       if: ${{ inputs.tag != '' }}
  #       id: set_tag_manual
  #       run: echo "TAG_NAME=$(echo ${inputs.tag})" >> $GITHUB_ENV
  #
  #     - name: Set Tag (auto)
  #       if: ${{ inputs.tag == '' }}
  #       id: set_tag_auto
  #       run: echo "TAG_NAME=$(echo ${steps.tag_version.outputs.new_tag})" >> $GITHUB_ENV

  # rustfmt on every run
  rustfmt:
    name: Rust Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the latest code
        id: git_checkout
        uses: actions/checkout@v3

      - name: Define Rust Toolchain
        id: define_rust_toolchain
        run: echo "RUST_TOOLCHAIN=$(cat ./rust-toolchain)" >> $GITHUB_ENV

      - name: Setup Rust Toolchain
        id: setup_rust_toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt

      - name: rustfmt
        id: rustfmt
        run: cargo fmt --all -- --check

  ###############################################
  ## Build Tagged Release
  ###############################################
  # Release Tests
  #   Only run if (a tag was passed in) -AND- (we're building the main branch which isn't a PR)
  release-tests:
    if: ${{ inputs.tag != '' && (github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && !contains(github.ref, 'refs/pull')) }}
    name: Release Tests
    # uses: wileyj/arm-test/.github/workflows/stacks-blockchain-tests.yml@master
    uses: ./.github/workflows/stacks-blockchain-tests.yml

  # Build source binaries
  #   Only run if (a tag was passed in) -AND- (we're building the main branch which isn't a PR)
  build-source:
    if: ${{ inputs.tag != '' && (github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && !contains(github.ref, 'refs/pull')) }}
    name: Build Binaries
    # uses: wileyj/${{ github.event.repository.name }}/.github/workflows/build-source-binary.yml@master
    uses: ./.github/workflows/build-source-binary.yml
    needs:
      - release-tests
      - rustfmt
    with:
      tag: ${{ inputs.tag }}
      parallel_jobs: 4
      arch: >-
        ["linux-glibc-x64", "linux-musl-x64", "linux-glibc-arm64", "linux-musl-arm64", "macos-x64", "macos-arm64", "windows-x64"]

  # Create github release with binary archives
  #   Only run if (a tag was passed in) -AND- (we're building the main branch which isn't a PR)
  github-release:
    if: ${{ inputs.tag != '' && (github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && !contains(github.ref, 'refs/pull')) }}
    name: Github Release
    # uses: wileyj/${{ github.event.repository.name }}/.github/workflows/github-release.yml@master
    uses: ./.github/workflows/github-release.yml
    needs: build-source
    with:
      tag: ${{ inputs.tag }}
      arch: >-
        ["linux-glibc-x64", "linux-musl-x64", "linux-glibc-arm64", "linux-musl-arm64", "macos-x64", "macos-arm64", "windows-x64"]
    secrets:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

  # Create docker alpine images
  #   Only run if (a tag was passed in) -AND- (we're building the main branch which isn't a PR)
  docker-alpine:
    if: ${{ inputs.tag != '' && (github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && !contains(github.ref, 'refs/pull')) }}
    name: Alpine Docker
    # uses: wileyj/${{ github.event.repository.name }}/.github/workflows/image-build-alpine.yml@master
    uses: ./.github/workflows/image-build-alpine-binary.yml
    needs: github-release
    with:
      tag: ${{ inputs.tag }}
      docker_platforms: linux/arm64, linux/amd64, linux/amd64/v2, linux/amd64/v3
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}

  # Create docker debian images
  #   Only run if (a tag was passed in) -AND- (we're building the main branch which isn't a PR)
  docker-debian:
    if: ${{ inputs.tag != '' && (github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && !contains(github.ref, 'refs/pull')) }}
    name: Debian Docker
    # uses: wileyj/${{ github.event.repository.name }}/.github/workflows/image-build-debian.yml@master
    uses: ./.github/workflows/image-build-debian-binary.yml
    needs: github-release
    with:
      tag: ${{ inputs.tag }}
      docker_platforms: linux/amd64, linux/amd64/v2, linux/amd64/v3
      linux_version: debian
      build_type: binary
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}

  ###############################################
  ## Build Branch/PR
  ###############################################
  # Create docker debian images
  #   Only run if (a tag was NOT passed in) or (we're building a non-master branch which isn't a PR) or (this is a PR with no input tag)
  build-branch:
    if: ${{ inputs.tag == '' || (github.ref != format('refs/heads/{0}', github.event.repository.default_branch) && !contains(github.ref, 'refs/pull')) }}
    name: Build Branch Image
    # uses: wileyj/${{ github.event.repository.name }}/.github/workflows/build-source-image.yml@master
    uses: ./.github/workflows/image-build-debian-source.yml
    needs:
      - rustfmt
    with:
      docker_platforms: linux/amd64, linux/amd64/v2, linux/amd64/v3
      linux_version: debian
      build_type: source
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
