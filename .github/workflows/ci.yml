name: CI

on:
  pull_request:
  workflow_dispatch:
    inputs:
      tag:
        description: "The tag to create (optional)"
        required: false

# env:
#   BUILD_PLATFORMS: linux/amd64, linux/amd64/v2, linux/amd64/v3, linux/arm64, linux/arm/v6, linux/arm/v7

concurrency:
  group: arm-test-${{ github.ref }}
  # Only cancel in progress if this is for a PR
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  create-dist:
    if: ${{ github.event.inputs.tag != '' }}
    uses: wileyj/arm-test/.github/workflows/dist.yml@master
    with:
      tag: ${{ github.event.inputs.tag }}

  create-release:
    if: ${{ github.event.inputs.tag != '' }}
    uses: wileyj/arm-test/.github/workflows/release.yml@master
    needs: create-dist
    with:
      tag: ${{ github.event.inputs.tag }}
    secrets:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

  upload-dist:
    if: ${{ github.event.inputs.tag != '' }}
    uses: wileyj/arm-test/.github/workflows/release.yml@master
    needs: create-release
    with:
      tag: ${{ github.event.inputs.tag }}
    secrets:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

  build-docker:
    if: ${{ github.event.inputs.tag != '' }}
    uses: wileyj/arm-test/.github/workflows/docker.yml@master
    needs: upload-dist
    with:
      tag: ${{ github.event.inputs.tag }}
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}

  # # Create distributions
  # dist:
  #   runs-on: ubuntu-latest
  #   if: ${{ github.event.inputs.tag != '' }}
  #   strategy:
  #     max-parallel: 4
  #     matrix:
  #       platform:
  #         - linux-x64
  #         - linux-armv7
  #         - linux-armv6
  #         - linux-arm64
  #         # - linux-musl-x64
  #         # - macos-x64
  #         # - macos-arm64
  #         # - windows-x64

  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set Vars
  #       run: |
  #         echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV
  #         echo "GITHUB_REF_SHORT=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Build distributable
  #       uses: docker/build-push-action@v3
  #       with:
  #         file: build-scripts/Dockerfile.${{ matrix.platform }}
  #         outputs: type=local,dest=./dist/${{ matrix.platform }}
  #         build-args: |
  #           OS_ARCH=${{ matrix.platform }}
  #           GIT_BRANCH=${{ env.GITHUB_REF_SHORT }}
  #           GIT_COMMIT=${{ env.GITHUB_SHA_SHORT }}

  #     - name: Compress artifact
  #       run: zip --junk-paths ${{ matrix.platform }} ./dist/${{ matrix.platform }}/*

  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: ${{ matrix.platform }}
  #         path: ${{ matrix.platform }}.zip

  # create-release:
  #   runs-on: ubuntu-latest
  #   if: ${{ github.event.inputs.tag != '' }}
  #   outputs:
  #     upload_url: ${{ steps.create_release.outputs.upload_url }}
  #   needs:
  #     - dist

  #   steps:
  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         # Use custom secrets.GH_TOKEN instead of default secrets.GITHUB_TOKEN because the custom token will trigger the
  #         # clarity-js-sdk-pr workflow. As events caused by default tokens do not trigger subsequent workflow runs to avoid loops.
  #         GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  #       with:
  #         tag_name: ${{ github.event.inputs.tag || github.ref }}
  #         release_name: Release ${{ github.event.inputs.tag || github.ref }}
  #         draft: false
  #         prerelease: true

  # # Upload distributables to a new release if we're building a tag or a tag was passed in
  # upload-dist:
  #   runs-on: ubuntu-latest
  #   if: ${{ github.event.inputs.tag != '' }}
  #   needs:
  #     - create-release
  #   strategy:
  #     max-parallel: 4
  #     matrix:
  #       platform:
  #         - linux-x64
  #         - linux-armv7
  #         - linux-armv6
  #         - linux-arm64
  #         # - linux-musl-x64
  #         # - macos-x64
  #         # - macos-arm64
  #         # - windows-x64

  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Download distro
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: ${{ matrix.platform }}
  #         path: dist/

  #     - name: Upload Release Asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ needs.create-release.outputs.upload_url }}
  #         asset_path: ./dist/${{ matrix.platform }}.zip
  #         asset_name: ${{ matrix.platform }}.zip
  #         asset_content_type: application/zip

  # build:
  #   runs-on: ubuntu-latest
  #   # if: ${{ github.event.inputs.tag != '' }}
  #   needs: upload-dist

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Set Vars
  #       run: |
  #         echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV
  #         echo "GITHUB_REF_SHORT=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: |
  #           wileyj/${{ github.event.repository.name }}
  #         tags: |
  #           type=ref,event=branch
  #           type=ref,event=pr
  #           ${{ github.event.inputs.tag }}

  #     - name: Login to DockerHub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_PASSWORD }}

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Build Image
  #       uses: docker/build-push-action@v3
  #       with:
  #         file: ./Dockerfile.binary
  #         platforms: ${{ env.BUILD_PLATFORMS }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         build-args: |
  #           BUILDKIT_PROGRESS=plain
  #           TAG=${{ github.event.inputs.tag}}
  #           GIT_BRANCH=${{ env.GITHUB_REF_SHORT }}
  #           GIT_COMMIT=${{ env.GITHUB_SHA_SHORT }}
  #         # push: true
  #         push: ${{ github.event.inputs.tag != '' || (github.ref != 'refs/heads/master' && !contains(github.ref, 'refs/pull')) }}
