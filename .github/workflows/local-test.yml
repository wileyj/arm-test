name: Local Tests

on:
  workflow_dispatch:

env:
  RUSTFLAGS: "-Cinstrument-coverage"
  LLVM_PROFILE_FILE: "stacks-blockchain-%p-%m.profraw"

jobs:
  create-cache:
    name: Create Cache
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the latest code
        id: git_checkout
        uses: actions/checkout@v3

      - name: echo stuff
        run: |
          echo "github.triggering_actor: ${{ github.triggering_actor }}"
          echo "github.actor: ${{ github.actor }}"
          echo "github.sha: ${{ github.sha }}"
          echo "github.run_id: ${{ github.run_id }}"
          echo "github.ref_type: ${{ github.ref_type }}"
          echo "github.ref_name: ${{ github.ref_name }}"
          echo "github.job_workflow_sha: ${{ github.job_workflow_sha }}"
          echo "github.job: ${{ github.job }}"
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        id: setup_rust_toolchain
        with:
          toolchain: stable
          components: llvm-tools-preview

      - name: Install Nextest
        id: install_nextest
        run: |
          curl -LsSf https://get.nexte.st/latest/linux | tar zxf - -C ${CARGO_HOME:-~/.cargo}/bin

      # Note - doing this with `cargo install grcov` also works, but is a bit slower
      - name: Install grcov
        id: install_grcov
        run: |
          VERSION=$(curl -sL https://api.github.com/repos/mozilla/grcov/releases/latest | jq -r .tag_name)
          ARCH=x86_64
          LIBC=gnu
          PLATFORM=unknown-linux
          curl -LsSf "https://github.com/mozilla/grcov/releases/download/${VERSION}/grcov-${ARCH}-${PLATFORM}-${LIBC}.tar.bz2" | tar jxf - -C ${CARGO_HOME:-~/.cargo}/bin

      - name: Cargo Build
        id: cargo_build
        run: |
          cargo build --workspace --release --all-targets

      # caches can exist already if the code has not changed.
      #  1. how long to keep a cache?
      #  2. should the cache be removed after each action has run?
      #  3. delete cache when PR is closed: https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#managing-caches
      - name: Save Cargo Cache
        id: cargo_cache
        uses: actions/cache/save@v3
        with:
          path: |
            ~/.cargo
            ./target/
          key: ${{ github.triggering_actor }}-${{ github.ref_name }}-${{ github.ref_type }}-${{ github.sha }}
          # key: ${{ github.actor }}-${{ github.ref_name }}-${{ github.sha }}
          # key: ${{ github.event.repository.name }}-${{ github.actor }}-${{ github.sha }}

  full-genesis:
    env:
      RUSTFLAGS: "-Cinstrument-coverage"
      LLVM_PROFILE_FILE: "stacks-blockchain-%p-%m.profraw"
    name: Full Genesis Test
    runs-on: ubuntu-latest
    needs: create-cache
    steps:
      - name: Checkout the latest code
        id: git_checkout
        uses: actions/checkout@v3

      - name: echo stuff
        run: |
          echo "github.triggering_actor: ${{ github.triggering_actor }}"
          echo "github.actor: ${{ github.actor }}"
          echo "github.sha: ${{ github.sha }}"
          echo "github.run_id: ${{ github.run_id }}"
          echo "github.ref_type: ${{ github.ref_type }}"
          echo "github.ref_name: ${{ github.ref_name }}"
          echo "github.job_workflow_sha: ${{ github.job_workflow_sha }}"
          echo "github.job: ${{ github.job }}"

      - name: Restore Cargo Cache
        id: cargo_cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cargo
            ./target/
          key: ${{ github.triggering_actor }}-${{ github.ref_name }}-${{ github.ref_type }}-${{ github.sha }}
          # key: ${{ github.actor }}-${{ github.ref_name }}-${{ github.sha }}
          # key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # - uses: actions-rust-lang/setup-rust-toolchain@v1
      #   id: setup_rust_toolchain
      #   with:
      #     toolchain: stable
      #     components: llvm-tools-preview

      # - name: Install Nextest
      #   id: install_nextest
      #   run: |
      #     curl -LsSf https://get.nexte.st/latest/linux | tar zxf - -C ${CARGO_HOME:-~/.cargo}/bin

      # # Note - doing this with `cargo install grcov` also works, but is a bit slower
      # - name: Install grcov
      #   id: install_grcov
      #   run: |
      #     VERSION=$(curl -sL https://api.github.com/repos/mozilla/grcov/releases/latest | jq -r .tag_name)
      #     ARCH=x86_64
      #     LIBC=gnu
      #     PLATFORM=unknown-linux
      #     curl -LsSf "https://github.com/mozilla/grcov/releases/download/${VERSION}/grcov-${ARCH}-${PLATFORM}-${LIBC}.tar.bz2" | tar jxf - -C ${CARGO_HOME:-~/.cargo}/bin

      - name: Run Tests
        id: run_tests
        run: |
          cargo nextest run --workspace --no-fail-fast --all-targets --tests --release --test-threads 8 --build-jobs 8

      - name: Run grcov
        id: run_grcov
        run: |
          grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "/*" -o lcov.info

      # - name: Unit Test Codecov
      #   id: codedov
      #   needs: run_grcov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     files: ./lcov.info
      #     name: unit_tests
      #     fail_ci_if_error: true

  sampled-genesis:
    name: Sampled Genesis
    runs-on: ubuntu-latest
    needs:
      - create-cache
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        test-name:
          - blockchain::parser::blkfile::tests::test_parse_blk_index
          - blockchain::parser::reader::tests::test_bitcoin_parse_genesis_block
          - blockchain::parser::reader::tests::test_bitcoin_parse_segwit_tx
          - blockchain::proto::block::tests::test_get_base_reward
          - blockchain::proto::script::tests::test_bitcoin_bogus_script
          - blockchain::proto::script::tests::test_bitcoin_script_data_output
          - blockchain::proto::script::tests::test_bitcoin_script_non_standard
          - blockchain::proto::script::tests::test_bitcoin_script_p2ms
          - blockchain::proto::script::tests::test_bitcoin_script_p2pk
          - blockchain::proto::script::tests::test_bitcoin_script_p2pkh
          - blockchain::proto::script::tests::test_bitcoin_script_p2sh
          - blockchain::proto::varuint::tests::test_varuint_read
          - blockchain::proto::varuint::tests::test_varuint_u16
          - blockchain::proto::varuint::tests::test_varuint_u32
          - blockchain::proto::varuint::tests::test_varuint_u64
          - blockchain::proto::varuint::tests::test_varuint_u8
          - callbacks::common::tests::test_callback
          - common::utils::tests::test_arr_to_hex
          - common::utils::tests::test_arr_to_hex_swapped
          - common::utils::tests::test_double_sha256
          - common::utils::tests::test_hex_to_arr32_swapped
          - common::utils::tests::test_merkle_root
          - common::utils::tests::test_ridemp160
          - errors::tests::test_op_error
    steps:
      - name: Checkout the latest code
        id: git_checkout
        uses: actions/checkout@v3

      - name: echo stuff
        run: |
          echo "github.triggering_actor: ${{ github.triggering_actor }}"
          echo "github.actor: ${{ github.actor }}"
          echo "github.sha: ${{ github.sha }}"
          echo "github.run_id: ${{ github.run_id }}"
          echo "github.ref_type: ${{ github.ref_type }}"
          echo "github.ref_name: ${{ github.ref_name }}"
          echo "github.job_workflow_sha: ${{ github.job_workflow_sha }}"
          echo "github.job: ${{ github.job }}"

      - name: Restore Cargo Cache
        id: cargo_cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cargo
            ./target/
          key: ${{ github.triggering_actor }}-${{ github.ref_name }}-${{ github.ref_type }}-${{ github.sha }}
          # key: ${{ github.actor }}-${{ github.ref_name }}-${{ github.sha }}
          # key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Tests
        id: run_tests
        run: |
          cargo nextest run --workspace --no-fail-fast --all-targets --tests --release --test-threads 8 --build-jobs 8 ${{ matrix.test-name }}

  open-api-validation:
    name: OpenAPI Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the latest code
        id: git_checkout
        uses: actions/checkout@v3

      # use the public name of the action
      - name: Redoc
        id: run_redoc
        uses: seeebiii/redoc-cli-github-action@v10
        with:
          args: "bundle -o ./open-api-docs.html ./docs/rpc/openapi.yaml"

      - name: check result
        id: check_redoc
        run: |
          test -f ./open-api-docs.html || (echo "Missing ./open-api-docs.html from previous step." && exit 1)

      - name: Upload bundled html
        id: upload_html_artifact
        uses: actions/upload-artifact@v3
        with:
          name: open-api-bundle
          path: |
            ./open-api-docs.html

  delete-cache:
    name: Delete Cache
    runs-on: ubuntu-latest
    steps:
      # - name: Checkout the latest code
      #   id: git_checkout
      #   uses: actions/checkout@v3
      - name: Cleanup
        run: |
          gh extension install actions/gh-actions-cache
          REPO=${{ github.repository }}
          gh actions-cache delete ${{ github.triggering_actor }}-${{ github.ref_name }}-${{ github.ref_type }}-${{ github.sha }} -R ${{ github.repository }} --confirm
          echo "Done"

# github.triggering_actor: wileyj
# github.actor: wileyj
# github.sha: aa4a72e5233c9337bcc76fbcec61cc7eaaf2dd51
# github.run_id: 5292050177
# github.ref_type: branch
# github.ref_name: master
# github.job_workflow_sha:
# github.job: create-cache

# key: ${{ github.triggering_actor }}-${{ github.ref_name }}-${{ github.ref_type }}-${{ github.sha }}

# gh actions-cache delete wileyj-master-branch-59aaf2a557ab250e3b09c83bc2e3ac2f2467b623 -R wileyj/arm-test --confirm

